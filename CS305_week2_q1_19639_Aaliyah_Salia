1.   	Write the program in any computer language to convert the given number from any base to a different base. The program needs to verify the validity of the given number first. If it is invalid, please prompt error information. Otherwise, print the correct result in the new base. For instance, as follows is the def function "base_conv" in Python.
 
def base_conv (num, base, new_base):
  """
	conv(123-45-6, 44, 23)	# -45- represents one digit in base 44
	123-45-6 is invalid, since one single bit -45- is bigger than base 44
 
	conv(123-45-6, 46, 23)
	# 123-45-6 (base 46) = 1*46^4 + 2*46^3 + 3*46^2 + 45*46^1 + 6*46^0 = 4680552 (base 10)
	# 4680552 (base 10) = -16-16-15-21-6 (base 23) = 16*23^4 + 16*23^3 + 15*23^2 + 21*23^1 + 6*23^0
 
	-16-16-15-21-6  (base 23) 	# Final answer with 5 digits for base 23
 
	conv(6-54-3-21-, 46, 23)	# -54- and -21- represent one digit in base 46 respectively
	6-54-3-21- is invalid, since one single bit -54- is bigger than base 46
 
	conv(6-54-3-21-, 63, 74)   
	# 6-54-3-21-  (base 63) = 6*63^3+54*63^2+3*63^1+21*63^0 = 1714818 (base 10)
	# 1714818 (base 10) = 4-17-11-16- (base 74) = 4*74^3 + 17*74^2 + 11*74^1 + 16*74^0
 
	4-17-11-16- (base 74)   	# Final answer with 4 digits for base 74
 
  """

CODE

def base_conv(num_str, base, new_base):
def validate(num_str, base):
digits = [d for d in num_str.split('-') if d]
for digit_str in digits:
if not digit_str.isdigit():
return False, digit_str
digit = int(digit_str)
if digit >= base:
return False, digit_str
return True, None


def to_base10(num_str, base):
digits = [d for d in num_str.split('-') if d]
num_base10 = 0
for i, digit_str in enumerate(reversed(digits)):
digit = int(digit_str)
num_base10 += digit * (base ** i)
return num_base10


def from_base10(num_base10, new_base):
if num_base10 == 0:
return '0'
digits = []
while num_base10 > 0:
remainder = num_base10 % new_base
if remainder >= 10:
digits.append(str(remainder))
else:
digits.append(str(remainder))
num_base10 //= new_base
return '-'.join(digits[::-1])


isValid, invalid_digit = validate(num_str, base)
if not isValid:
return f"{num_str} is invalid, since one single bit -{invalid_digit}- is bigger than base {base}"


num_base10 = to_base10(num_str, base)
result = from_base10(num_base10, new_base)


return result


# Test cases
print(base_conv("123-45-6", 44, 23))
print(base_conv("123-45-6", 46, 23))
print(base_conv("6-54-3-21-", 46, 23))
print(base_conv("6-54-3-21-", 63, 74))
